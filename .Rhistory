plot <- data %>%
dplyr::select(.data[[input$numVar]]) %>%
ggplot2::ggplot(ggplot2::aes(.data[[input$numVar]])) +
ggplot2::geom_histogram(bins = 10, ggplot2::aes(fill = input$tf_color)) +
ggplot2::ggtitle(paste0("Square Root Transformation of ", numText)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = -45, vjust = 1, hjust = 0), legend.position = "none") +
ggplot2::labs(x = numText, y = "Count") +
ggplot2::scale_fill_manual(values = input$tf_color)
plotly::ggplotly(plot)
})
output$yj <- plotly::renderPlotly({
numText <- input$numVar %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
formula <- as.formula(paste(input$numVar , ".", sep = "~"))
bc_recipe <- recipes::recipe(x = data, formula = NULL) %>%
recipes::step_YeoJohnson(recipes::all_numeric()) %>%
recipes::prep(data, retain = TRUE)
data <- recipes::juice(bc_recipe)
plot <- data %>%
dplyr::select(.data[[input$numVar]]) %>%
ggplot2::ggplot(ggplot2::aes(.data[[input$numVar]])) +
ggplot2::geom_histogram(bins = 10, ggplot2::aes(fill = input$tf_color)) +
ggplot2::ggtitle(paste0("Yeo-Johnson Transformation of ", numText)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = -45, vjust = 1, hjust = 0), legend.position = "none") +
ggplot2::labs(x = numText, y = "Count") +
ggplot2::scale_fill_manual(values = input$tf_color)
plotly::ggplotly(plot)
})
output$tf_color <- shiny::renderUI({
selectInput(
inputId = "tf_color",
label = "Color",
choices = colorSH
)
})
#Visualization Tab Plots
output$ppsText <- shiny::renderText({
ppsCalc <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
ppsr::score_matrix()
print(paste0("The Predictive Power Score Between ",
input$pred, " and ", input$resp, " is: ",
round(ppsCalc[2], 2)))
})
output$color <- shiny::renderUI({
selectInput(
inputId = "color",
label = "Bar Color",
choices = colorSH
)
})
output$set_color <- shiny::renderUI({
selectInput(
inputId = "set_color",
label = "Stacked Bar Color",
choices = colorSets
)
})
output$predPlot <- plotly::renderPlotly({
predText <- input$pred %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
if(guess_cat_num(data[[input$pred]]) == "cat") {
plot <- data %>%
dplyr::select(.data[[input$pred]]) %>%
dplyr::group_by(.data[[input$pred]]) %>%
dplyr::summarize(n =dplyr:: n()) %>%
dplyr::mutate(pct = base::round(n / sum(n) * 100, 1)) %>%
ggplot2::ggplot(ggplot2::aes(.data[[input$pred]])) +
ggplot2::geom_col(ggplot2::aes(y = .data[["n"]]),
position = "dodge",
fill = input$color) +
ggplot2::labs(x = predText, y = "Count") +
ggplot2::ggtitle(paste0("Distribution of ", predText)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = -45, vjust = 1, hjust = 0))
plotly::ggplotly(plot)
}
else if(guess_cat_num(data[[input$pred]]) == "num") {
plot <- data %>%
dplyr::select(.data[[input$pred]]) %>%
ggplot2::ggplot(ggplot2::aes(.data[[input$pred]])) +
ggplot2::geom_density(ggplot2::aes(fill = input$color, alpha = .7)) +
ggplot2::ggtitle(paste0("Distribution of ", predText)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = -45, vjust = 1, hjust = 0)) +
ggplot2::scale_fill_manual(values = input$color) +
ggplot2::labs(x = predText, y = "Density")
plotly::ggplotly(plot)
}
})
output$respPlot <- plotly::renderPlotly({
respText <- input$resp %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
if(guess_cat_num(data[[input$resp]]) == "cat") {
plot <- data %>%
dplyr::select(.data[[input$resp]]) %>%
dplyr::group_by(.data[[input$resp]]) %>%
dplyr::summarize(n = dplyr::n()) %>%
dplyr::mutate(pct = round(n / sum(n) * 100, 1)) %>%
ggplot2::ggplot(ggplot2::aes(.data[[input$resp]])) +
ggplot2::geom_col(ggplot2::aes(y = .data[["n"]]),
position = "dodge",
fill = input$color) +
ggplot2::labs(x = respText, y = "Count") +
ggplot2::ggtitle(paste0("Distribution of ", respText)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = -45, vjust = 1, hjust = 0))
plotly::ggplotly(plot)
}
else if(guess_cat_num(data[[input$resp]]) == "num") {
#Some other graphical component will go here
plot <- data %>%
dplyr::select(.data[[input$resp]]) %>%
ggplot2::ggplot(ggplot2::aes(.data[[input$resp]])) +
ggplot2::geom_density(ggplot2::aes(fill = input$color, alpha = .7)) +
ggplot2::ggtitle(paste0("Distribution of ", respText)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = -45, vjust = 1, hjust = 0)) +
ggplot2::scale_fill_manual(values = input$color) +
ggplot2::labs(x = respText, y = "Density")
plotly::ggplotly(plot)
}
})
output$bivarPlot <- plotly::renderPlotly({
predText <- input$pred %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
respText <- input$resp %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
if(guess_cat_num(data[[input$pred]]) == "num" & guess_cat_num(data[[input$resp]]) == "num") {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[[input$pred]], y = .data[[input$resp]])) +
ggplot2::geom_point() +
ggplot2::geom_smooth() +
ggplot2::ggtitle(paste0("Scatterplot of ", predText, " and ", respText)) +
ggplot2::labs(x = predText, y = respText)
plotly::ggplotly(plot)
}
else if(guess_cat_num(data[[input$pred]]) == "cat" & guess_cat_num(data[[input$resp]]) == "num") {
#If Categorical is datetype, plot a line chart
if(inherits(data[[input$pred]], "Date") == TRUE) {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[[input$pred]], y = .data[[input$resp]])) +
ggplot2::geom_line() +
ggplot2::ggtitle(paste0("Time Series of ", respText))
}
#Otherwise, show a boxplot
else {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[[input$pred]], y = .data[[input$resp]])) +
ggplot2::geom_boxplot(fill = input$color, alpha = .7) +
ggplot2::ggtitle(paste0("Boxplot of ", respText, " Split On ", predText))
}
plotly::ggplotly(plot)
}
else if(guess_cat_num(data[[input$pred]]) == "num" & guess_cat_num(data[[input$resp]]) == "cat") {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[[input$resp]], y = .data[[input$pred]] )) +
ggplot2::geom_boxplot(fill = input$color, alpha = .7) +
ggplot2::ggtitle(paste0("Boxplot of ", respText, " Split On ", predText)) +
ggplot2::coord_flip()
plotly::ggplotly(plot)
}
else {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
dplyr::group_by(.data[[input$pred]], .data[[input$resp]]) %>%
dplyr::summarize(n = dplyr::n()) %>%
dplyr::mutate(pct = round(n / sum(n) * 100, 1)) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[[input$resp]], y = .data[["n"]])) +
ggplot2::geom_col(ggplot2::aes(fill = .data[[input$pred]])) +
ggplot2::labs(x = predText, y = "Count") +
#ggplot2::scale_fill_brewer(palette = input$set_color) +
ggthemes::scale_fill_tableau(palette = input$set_color) +
ggplot2::ggtitle(paste0("Stacked Bar Plot of ", predText, " Split On ", respText)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = -45, vjust = 1, hjust = 0)) +
ggplot2::guides(fill = ggplot2::guide_legend(title = respText))
plotly::ggplotly(plot)
}
})
output$bivarPlotAlt <- plotly::renderPlotly({
predText <- input$pred %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
respText <- input$resp %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
if(guess_cat_num(data[[input$pred]]) == "num" & guess_cat_num(data[[input$resp]]) == "num") {
df <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
tidyr::drop_na()
form <- as.formula(paste0("~", input$pred, " + ", input$resp))
df$pc <- predict(prcomp(form, df, scale = TRUE))[,1]
plot <- df %>%
ggplot2::ggplot(ggplot2::aes(x = .data[[input$pred]], y = .data[[input$resp]], color = pc)) +
ggplot2::geom_point(shape = 16, size = 3, alpha = .7, show.legend = FALSE) +
ggplot2::scale_color_gradient(low = "#0091ff", high = "#f0650e") +
ggplot2::ggtitle(paste0("Scatterplot of ", predText, " and ", respText)) +
ggplot2::labs(x = predText, y = respText)
plotly::ggplotly(plot)
}
else if(guess_cat_num(data[[input$pred]]) == "cat" & guess_cat_num(data[[input$resp]]) == "num") {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[[input$resp]], fill = .data[[input$pred]])) +
ggplot2::geom_density(alpha = .7) +
#ggplot2::scale_fill_brewer(palette = input$set_color) +
ggthemes::scale_fill_tableau(palette = input$set_color) +
ggplot2::ggtitle(paste0("Density Plot of ", respText, " Split On ", predText)) +
ggplot2::labs(x = respText, y = "Density")
plotly::ggplotly(plot)
}
else if(guess_cat_num(data[[input$pred]]) == "num" & guess_cat_num(data[[input$resp]]) == "cat") {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[[input$pred]], fill = .data[[input$resp]])) +
ggplot2::geom_density(alpha = .7) +
#ggplot2::scale_fill_brewer(palette = input$set_color) +
ggthemes::scale_fill_tableau(palette = input$set_color) +
ggplot2::ggtitle(paste0("Density Plot of ", respText, " Split On ", predText)) +
ggplot2::labs(x = predText, y = "Density")
plotly::ggplotly(plot)
}
else {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
dplyr::group_by(.data[[input$pred]], .data[[input$resp]]) %>%
dplyr::summarize(n = dplyr::n()) %>%
dplyr::mutate(pct = round(n / sum(n) * 100, 1)) %>%
ggplot2::ggplot(ggplot2::aes(x = .data[[input$pred]], y = .data[["n"]])) +
ggplot2::geom_col(ggplot2::aes(fill = .data[[input$resp]]), position = "dodge") +
ggplot2::labs(x = predText, y = "Count") +
#ggplot2::scale_fill_brewer(palette = input$set_color) +
ggthemes::scale_fill_tableau(palette = input$set_color) +
ggplot2::ggtitle(paste0("Grouped Bar Plot of ", predText, " Split On ", respText)) +
ggplot2::theme(axis.text.x = ggplot2::element_text(angle = -45, vjust = 1, hjust = 0)) +
ggplot2::guides(fill = ggplot2::guide_legend(title = respText))
plotly::ggplotly(plot)
}
})
## Descriptions for Predictor and Response Variable
output$predDesc <- DT::renderDataTable({
if(guess_cat_num(data[[input$pred]]) == "num") {
data %>%
dplyr::select(.data[[input$pred]]) %>%
dlookr::describe() %>%
dplyr::select(variable, na, mean, sd, se_mean, IQR, skewness, kurtosis, p00, p25, p50, p75, p100) %>%
purrr::set_names("Predictor", "Missing", "Mean", "SD", "SE Mean", "IQR", "Skewness", "Kurtosis",
"Min", "25th Percentile", "Median", "75th Percentile", "Max") %>%
base::t() %>%
base::as.data.frame() %>%
tibble::rownames_to_column("row_names") %>%
purrr::set_names("Metric", "Value") %>%
DT::datatable(options = list(pageLength = 15), rownames = NULL)
}
else{
data %>%
dplyr::select(.data[[input$pred]]) %>%
dlookr::diagnose_category() %>%
DT::datatable(options = list(pageLength = 15), rownames = NULL)
}
})
output$respDesc <- DT::renderDataTable({
if(guess_cat_num(data[[input$resp]]) == "num") {
data %>%
dplyr::select(.data[[input$resp]]) %>%
dlookr::describe() %>%
dplyr::select(variable, na, mean, sd, se_mean, IQR, skewness, kurtosis, p00, p25, p50, p75, p100) %>%
purrr::set_names("Predictor", "Missing", "Mean", "SD", "SE Mean", "IQR", "Skewness", "Kurtosis",
"Min", "25th Percentile", "Median", "75th Percentile", "Max") %>%
base::t() %>%
base::as.data.frame() %>%
tibble::rownames_to_column("row_names") %>%
purrr::set_names("Metric", "Value") %>%
DT::datatable(options = list(pageLength = 15), rownames = NULL)
}
else{
data %>%
dplyr::select(.data[[input$resp]]) %>%
dlookr::diagnose_category() %>%
DT::datatable(options = list(pageLength = 15), rownames = NULL)
}
})
## Basic interactive data table output of all data
output$dataTable <- DT::renderDataTable({
DT::datatable(data = data, filter = "top")
})
# Predictive Power Score
output$ppsTable <- DT::renderDataTable({
ppsMat <- ppsr::score_matrix(data)
DT::datatable(round(ppsMat,2), filter = "top", rownames = NULL)
})
output$ppsPlot <- shiny::renderPlot({
ppsMat <- ppsr::score_matrix(data)
ggcorrplot::ggcorrplot(ppsMat,
title = "Predictive Power Score Plot of Data",
show.legend = FALSE,
type = "upper",
lab = TRUE,
lab_size = 3.5)
})
# Correlation Graphs
output$corrPlot <- shiny::renderPlot({
corMat <- rstatix::cor_mat(data, names(dplyr::select_if(data, is.numeric)))
ggcorrplot::ggcorrplot(corMat,
title = "Correlation Plot of Data",
colors = c("blue", "white", "orange"),
hc.order = TRUE,
type = "upper",
lab = TRUE,
insig = "blank",
lab_size = 3.5)
})
output$corrTable <- DT::renderDataTable({
corMat <- rstatix::cor_mat(data, names(dplyr::select_if(data, is.numeric)))
DT::datatable(corMat, filter = "top", rownames = NULL)
})
}
# Run the application
shiny::shinyApp(ui = ui, server = server)
}
data(penguins, data = "modeldata")
data(penguins)
reasyeda::shinyEDA(penguins)
knitr::opts_chunk$set(echo = TRUE)
## Database connection
library(RODBC)
## Custom R package for exploratory data analysis and creating pretty plots
#remotes::install_github('amanda-park/reasyeda')
library(reasyeda)
data(penguins, modeldata)
a
shinyEDA(penguins)
library(pkgdown)
pkgdown:::build_site_external()
pkgdown:::build_site_external()
library(devtools)
devtools::build()
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
install.packages("isoband")
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
devtools::install()
install.packages("isoband")
install.packages("isoband")
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
devtools::install()
.Last.error.trace
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
?eventReactive
install.packages("shinycssloaders")
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
?tabBox
?tabPanel
devtools::install()
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
?tabPanel
require(reasyeda)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
.Last.error.trace
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::build_readme()
pkgdown::build_site()
