ggplot2::theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust = 0), legend.position = "none") +
ggplot2::labs(x = numText, y = "Count", title = base::paste0("Original Data for ", numText)) +
ggplot2::scale_fill_manual(values = input$tf_color)
plotly::ggplotly(plot)
})
output$boxCox <- plotly::renderPlotly({
numText <- input$numVar %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
formula <- as.formula(paste(input$numVar , ".", sep = "~"))
bc_recipe <- recipes::recipe(x = data, formula = NULL) %>%
recipes::step_BoxCox(all_numeric()) %>%
recipes::prep(data, retain = TRUE)
data <- recipes::juice(bc_recipe)
bc_val <- recipes::tidy(bc_recipe, number = 1) %>%
dplyr::filter(terms == input$numVar) %>%
dplyr::select(value) %>%
base::as.numeric() %>%
base::round(2)
sw <- data %>%
pull(.data[[input$numVar]]) %>%
shapiro.test()
plot <- data %>%
dplyr::select(.data[[input$numVar]]) %>%
ggplot(aes(.data[[input$numVar]])) +
geom_histogram(stat = "bin",
bins = 10, aes(fill = input$tf_color)) +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust = 0), legend.position = "none") +
labs(x = numText, y = "Count", title = paste0("Box-Cox Transformation of ", numText, " with Lambda = ", bc_val)) +
scale_fill_manual(values = input$tf_color)
ggplotly(plot)
})
output$log <- plotly::renderPlotly({
numText <- input$numVar %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
formula <- as.formula(paste(input$numVar , ".", sep = "~"))
bc_recipe <- recipes::recipe(x = data, formula = NULL) %>%
recipes::step_log(all_numeric()) %>%
recipes::prep(data, retain = TRUE)
data <- juice(bc_recipe)
plot <- data %>%
dplyr::select(.data[[input$numVar]]) %>%
ggplot(aes(.data[[input$numVar]])) +
geom_histogram(bins = 10, aes(fill = input$tf_color)) +
ggtitle(paste0("Log Transformation of ", numText)) +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust = 0), legend.position = "none") +
labs(x = numText, y = "Count") +
scale_fill_manual(values = input$tf_color)
ggplotly(plot)
})
output$sqrt <- plotly::renderPlotly({
numText <- input$numVar %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
bc_recipe <- recipes::recipe(x = data, formula = NULL) %>%
recipes::step_sqrt(all_numeric()) %>%
recipes::prep(data, retain = TRUE)
data <- juice(bc_recipe)
plot <- data %>%
dplyr::select(.data[[input$numVar]]) %>%
ggplot(aes(.data[[input$numVar]])) +
geom_histogram(bins = 10, aes(fill = input$tf_color)) +
ggtitle(paste0("Square Root Transformation of ", numText)) +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust = 0), legend.position = "none") +
labs(x = numText, y = "Count") +
scale_fill_manual(values = input$tf_color)
ggplotly(plot)
})
output$yj <- plotly::renderPlotly({
numText <- input$numVar %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
formula <- as.formula(paste(input$numVar , ".", sep = "~"))
bc_recipe <- recipes::recipe(x = data, formula = NULL) %>%
recipes::step_YeoJohnson(all_numeric()) %>%
recipes::prep(data, retain = TRUE)
data <- juice(bc_recipe)
plot <- data %>%
dplyr::select(.data[[input$numVar]]) %>%
ggplot(aes(.data[[input$numVar]])) +
geom_histogram(bins = 10, aes(fill = input$tf_color)) +
ggtitle(paste0("Yeo-Johnson Transformation of ", numText)) +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust = 0), legend.position = "none") +
labs(x = numText, y = "Count") +
scale_fill_manual(values = input$tf_color)
ggplotly(plot)
})
output$tf_color <- shiny::renderUI({
selectInput(
inputId = "tf_color",
label = "Color",
choices = c("royalblue", "tomato4", "darkorange", "chocolate",
"darkgoldenrod", "yellow4",
"green4","darkorchid4", "lightpink4", "darkgray",
"black", "gray", "white", "#1f5448", "#5f846b",
"#96ad92", "#96ad92", "#b5c762",
"#c7d7ca",
"#d3e0d5",
"#326f48",
"#699269",
"#89b284",
"#a9cd9c",
"#bed9ac",
"#cde0b8",
"#909c4d",
"#a1c47c",
"#c1d77e",
"#cbe670",
"#cedc00",
"#e0e721",
"#fece37",
"#ffda67",
"#e79218",
"#f58f0e",
"#6c3279",
"#981d97",
"#c73c46",
"#d05b56",
"#f25240",
"#8c7d58",
"#b9aa7e",
"#d6cda6",
"#313c44",
"#6a6f71",
"#8e8e90",
"#b3b7ad",
"#ced0ca",
"#e0e0dc",
"#4f6e84",
"#6e889b",
"#899daa",
"#bac2c4",
"#cbd1d2",
"#081a42",
"#05206f",
"#224d8c",
"#2655b0",
"#8190c8",
"#b6bfda",
"#00708e",
"#00737f",
"#00a0aa",
"#5aa096",
"#00557f",
"#00aa7f",
"#1d7576",
"#009a44"
)
)
})
#Visualization Tab Plots
output$ppsText <- shiny::renderText({
ppsCalc <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
ppsr::score_matrix()
print(paste0("The Predictive Power Score Between ",
input$pred, " and ", input$resp, " is: ",
round(ppsCalc[2], 2)))
})
output$color <- shiny::renderUI({
selectInput(
inputId = "color",
label = "Bar Color",
choices = c("royalblue", "tomato4", "darkorange", "chocolate", "darkgoldenrod", "yellow4",
"green4","darkorchid4", "lightpink4", "darkgray",
"black", "gray", "white", "#1f5448", "#5f846b",
"#96ad92", "#96ad92", "#b5c762",
"#c7d7ca",
"#d3e0d5",
"#326f48",
"#699269",
"#89b284",
"#a9cd9c",
"#bed9ac",
"#cde0b8",
"#909c4d",
"#a1c47c",
"#c1d77e",
"#cbe670",
"#cedc00",
"#e0e721",
"#fece37",
"#ffda67",
"#e79218",
"#f58f0e",
"#6c3279",
"#981d97",
"#c73c46",
"#d05b56",
"#f25240",
"#8c7d58",
"#b9aa7e",
"#d6cda6",
"#313c44",
"#6a6f71",
"#8e8e90",
"#b3b7ad",
"#ced0ca",
"#e0e0dc",
"#4f6e84",
"#6e889b",
"#899daa",
"#bac2c4",
"#cbd1d2",
"#081a42",
"#05206f",
"#224d8c",
"#2655b0",
"#8190c8",
"#b6bfda",
"#00708e",
"#00737f",
"#00a0aa",
"#5aa096",
"#00557f",
"#00aa7f",
"#1d7576",
"#009a44")
)
})
output$set_color <- shiny::renderUI({
selectInput(
inputId = "set_color",
label = "Stacked Bar Color",
choices = c("Set2", "Set1", "Set3",
"Pastel2", "Pastel3", "Dark2", "Paired",
"RdYlBu", "PuOr", "PRGn", "PiYG", "BrGB",
"Spectral", "YlGnBu", "YlGn", "RdPu", "Reds",
"PuBuGn", "Oranges", "OrRd", "Greys", "Greens",
"GnBu")
)
})
output$predPlot <- plotly::renderPlotly({
predText <- input$pred %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
if(guess_cat_num(data[[input$pred]]) == "cat") {
plot <- data %>%
dplyr::select(.data[[input$pred]]) %>%
group_by(.data[[input$pred]]) %>%
summarize(n = n()) %>%
mutate(pct = round(n / sum(n) * 100, 1)) %>%
ggplot(aes(.data[[input$pred]])) +
geom_col(aes(y = .data[["n"]]),
position = "dodge",
fill = input$color) +
labs(x = predText, y = "Count") +
ggtitle(paste0("Distribution of ", predText)) +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust = 0))
ggplotly(plot)
}
else if(guess_cat_num(data[[input$pred]]) == "num") {
plot <- data %>%
dplyr::select(.data[[input$pred]]) %>%
ggplot(aes(.data[[input$pred]])) +
geom_density(aes(fill = input$color, alpha = .7)) +
ggtitle(paste0("Distribution of ", predText)) +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust = 0)) +
scale_fill_manual(values = input$color) +
labs(x = predText, y = "Density")
ggplotly(plot)
}
})
output$respPlot <- renderPlotly({
respText <- input$resp %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
if(guess_cat_num(data[[input$resp]]) == "cat") {
plot <- data %>%
dplyr::select(.data[[input$resp]]) %>%
group_by(.data[[input$resp]]) %>%
summarize(n = n()) %>%
mutate(pct = round(n / sum(n) * 100, 1)) %>%
ggplot(aes(.data[[input$resp]])) +
geom_col(aes(y = .data[["n"]]),
position = "dodge",
fill = input$color) +
labs(x = respText, y = "Count") +
# theme_spectrum_marketing() +
# scale_colour_spectrum_marketing() +
ggtitle(paste0("Distribution of ", respText)) +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust = 0))
ggplotly(plot)
}
else if(guess_cat_num(data[[input$resp]]) == "num") {
#Some other graphical component will go here
plot <- data %>%
dplyr::select(.data[[input$resp]]) %>%
ggplot(aes(.data[[input$resp]])) +
geom_density(aes(fill = input$color, alpha = .7)) +
ggtitle(paste0("Distribution of ", respText)) +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust = 0)) +
scale_fill_manual(values = input$color) +
labs(x = respText, y = "Density")
ggplotly(plot)
}
})
output$bivarPlot <- plotly::renderPlotly({
predText <- input$pred %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
respText <- input$resp %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
if(guess_cat_num(data[[input$pred]]) == "num" & guess_cat_num(data[[input$resp]]) == "num") {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
ggplot(aes(x = .data[[input$pred]], y = .data[[input$resp]])) +
geom_point() +
geom_smooth() +
ggtitle(paste0("Scatterplot of ", predText, " and ", respText)) +
labs(x = predText, y = respText)
ggplotly(plot)
}
else if(guess_cat_num(data[[input$pred]]) == "cat" & guess_cat_num(data[[input$resp]]) == "num") {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
ggplot(aes(x = .data[[input$pred]], y = .data[[input$resp]])) +
geom_boxplot(fill = input$color, alpha = .7) +
ggtitle(paste0("Boxplot of ", respText, " Split On ", predText))
ggplotly(plot)
}
else if(guess_cat_num(data[[input$pred]]) == "num" & guess_cat_num(data[[input$resp]]) == "cat") {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
ggplot(aes(x = .data[[input$resp]], y = .data[[input$pred]] )) +
geom_boxplot(fill = input$color, alpha = .7) +
ggtitle(paste0("Boxplot of ", respText, " Split On ", predText)) +
coord_flip()
ggplotly(plot)
}
else {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
group_by(.data[[input$pred]], .data[[input$resp]]) %>%
summarize(n = n()) %>%
mutate(pct = round(n / sum(n) * 100, 1)) %>%
ggplot(aes(x = .data[[input$resp]], y = .data[["n"]])) +
geom_col(aes(fill = .data[[input$pred]])) +
labs(x = predText, y = "Count") +
scale_fill_brewer(palette = input$set_color) +
ggtitle(paste0("Stacked Bar Plot of ", predText, " Split On ", respText)) +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust = 0)) +
guides(fill = guide_legend(title = respText))
ggplotly(plot)
}
})
output$bivarPlotAlt <- plotly::renderPlotly({
predText <- input$pred %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
respText <- input$resp %>%
stringr::str_replace_all("_", " ") %>%
stringr::str_to_title()
if(guess_cat_num(data[[input$pred]]) == "num" & guess_cat_num(data[[input$resp]]) == "num") {
df <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
tidyr::drop_na()
form <- as.formula(paste0("~", input$pred, " + ", input$resp))
df$pc <- predict(prcomp(form, df, scale = TRUE))[,1]
plot <- df %>%
ggplot(aes(x = .data[[input$pred]], y = .data[[input$resp]], color = pc)) +
geom_point(shape = 16, size = 3, alpha = .7, show.legend = FALSE) +
scale_color_gradient(low = "#0091ff", high = "#f0650e") +
ggtitle(paste0("Scatterplot of ", predText, " and ", respText)) +
labs(x = predText, y = respText)
ggplotly(plot)
}
else if(guess_cat_num(data[[input$pred]]) == "cat" & guess_cat_num(data[[input$resp]]) == "num") {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
ggplot(aes(x = .data[[input$resp]], fill = .data[[input$pred]])) +
geom_density(alpha = .7) +
scale_fill_brewer(palette = input$set_color) +
ggtitle(paste0("Density Plot of ", respText, " Split On ", predText)) +
labs(x = respText, y = "Density")
ggplotly(plot)
}
else if(guess_cat_num(data[[input$pred]]) == "num" & guess_cat_num(data[[input$resp]]) == "cat") {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
ggplot(aes(x = .data[[input$pred]], fill = .data[[input$resp]])) +
geom_density(alpha = .7) +
scale_fill_brewer(palette = input$set_color) +
ggtitle(paste0("Density Plot of ", respText, " Split On ", predText)) +
labs(x = predText, y = "Density")
ggplotly(plot)
}
else {
plot <- data %>%
dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
group_by(.data[[input$pred]], .data[[input$resp]]) %>%
summarize(n = n()) %>%
mutate(pct = round(n / sum(n) * 100, 1)) %>%
ggplot(aes(x = .data[[input$pred]], y = .data[["n"]])) +
geom_col(aes(fill = .data[[input$resp]]), position = "dodge") +
labs(x = predText, y = "Count") +
scale_fill_brewer(palette = input$set_color) +
ggtitle(paste0("Grouped Bar Plot of ", predText, " Split On ", respText)) +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust = 0)) +
guides(fill = guide_legend(title = respText))
ggplotly(plot)
}
})
## Descriptions for Predictor and Response Variable
output$predDesc <- DT::renderDataTable({
if(guess_cat_num(data[[input$pred]]) == "num") {
data %>%
dplyr::select(.data[[input$pred]]) %>%
dlookr::describe() %>%
dplyr::select(variable, na, mean, sd, se_mean, IQR, skewness, kurtosis, p00, p25, p50, p75, p100) %>%
set_names("Predictor", "Missing", "Mean", "SD", "SE Mean", "IQR", "Skewness", "Kurtosis",
"Min", "25th Percentile", "Median", "75th Percentile", "Max") %>%
t() %>%
as.data.frame() %>%
rownames_to_column("row_names") %>%
set_names("Metric", "Value") %>%
datatable(options = list(pageLength = 15))
}
else{
data %>%
dplyr::select(.data[[input$pred]]) %>%
dlookr::diagnose_category() %>%
datatable(options = list(pageLength = 15))
}
})
output$respDesc <- DT::renderDataTable({
if(guess_cat_num(data[[input$resp]]) == "num") {
data %>%
dplyr::select(.data[[input$resp]]) %>%
dlookr::describe() %>%
dplyr::select(variable, na, mean, sd, se_mean, IQR, skewness, kurtosis, p00, p25, p50, p75, p100) %>%
set_names("Predictor", "Missing", "Mean", "SD", "SE Mean", "IQR", "Skewness", "Kurtosis",
"Min", "25th Percentile", "Median", "75th Percentile", "Max") %>%
t() %>%
as.data.frame() %>%
rownames_to_column("row_names") %>%
set_names("Metric", "Value") %>%
datatable(options = list(pageLength = 15))
}
else{
data %>%
dplyr::select(.data[[input$resp]]) %>%
dlookr::diagnose_category() %>%
datatable(options = list(pageLength = 15))
}
})
##Currently not using compareTable
# output$compareTable <- renderTable({
#     data %>%
#         dplyr::select(.data[[input$pred]], .data[[input$resp]]) %>%
#         group_by(.data[[input$pred]], .data[[input$resp]]) %>%
#         summarize(Count = n()) %>%
#         mutate(Percent = round(Count / sum(Count) * 100, 1))
# })
## Basic interactive data table output of all data
output$dataTable <- DT::renderDataTable({
DT::datatable(data = data, filter = "top")
})
# Predictive Power Score
output$ppsTable <- DT::renderDataTable({
ppsMat <- ppsr::score_matrix(data)
DT::datatable(round(ppsMat,2), filter = "top")
})
output$ppsPlot <- shiny::renderPlot({
ppsMat <- ppsr::score_matrix(data)
ggcorrplot::ggcorrplot(ppsMat,
title = "Predictive Power Score Plot of Data",
ggtheme = theme_spectrum_marketing(),
show.legend = FALSE,
type = "upper",
lab = TRUE,
lab_size = 3.5)
})
# Correlation Graphs
output$corrPlot <- shiny::renderPlot({
corMat <- rstatix::cor_mat(data, names(select_if(data, is.numeric)))
ggcorrplot::ggcorrplot(corMat,
title = "Correlation Plot of Data",
ggtheme = theme_spectrum_marketing(),
#colors = c("blue", "white", "orange"),
hc.order = TRUE,
type = "upper",
lab = TRUE,
insig = "blank",
lab_size = 3.5)
})
output$corrTable <- DT::renderDataTable({
corMat <- rstatix::cor_mat(data, names(select_if(data, is.numeric)))
DT::datatable(corMat, filter = "top")
})
# df_products_upload <- reactive({
#   inFile <- input$target_upload
#   if (is.null(inFile))
#     return(NULL)
#   data <- read.csv(inFile$datapath, header = TRUE,sep = input$separator)
#   return(data)
# })
# # Downloadable csv of selected dataset ----
# output$downloadData <- downloadHandler(
#     filename = function() {
#         paste("PPSTable", ".csv", sep = "")
#     },
#     content = function(file) {
#         write.csv(ppsTable(), file, row.names = FALSE)
#     }
# )
}
# Run the application
shiny::shinyApp(ui = ui, server = server)
}
